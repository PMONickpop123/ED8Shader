
#define FPS_MAX	30

struct DirectionalLight
{
	half3 m_direction;
	half3 m_colorIntensity;
};

// 影受けバイアス値
#define SHADOW_LIGHTDIR_BIAS	0.05
#define SHADOW_NORMALDIR_BIAS	0.05

struct CombinedCascadedShadowMap
{
	// 二分割
	float4x4 m_split0Transform;
	float4x4 m_split1Transform;

	float4 m_splitDistances;
};

#define NUM_SKIN_TRANSFORMS	160
layout(std140) uniform Param
{
uniform SceneWideParameters scene;

uniform float4x4 World;
uniform float4x4 WorldViewProjection;
uniform DirectionalLight Light0;
uniform CombinedCascadedShadowMap LightShadow0;
uniform float PerMaterialMainLightClampFactor;
uniform float3 LightDirForChar;

uniform float4 GameMaterialDiffuse;
uniform float4 GameMaterialEmission;
uniform float GameMaterialMonotone;
uniform float4 GameMaterialTexcoord;

uniform float4 UVaMUvColor;
uniform float4 UVaProjTexcoord;
uniform float4 UVaMUvTexcoord;
uniform float4 UVaMUv2Texcoord;
uniform float4 UVaDuDvTexcoord;

uniform float AlphaThreshold;
uniform float3 ShadowColorShift;

uniform float Shininess;
uniform float SpecularPower;
uniform float3 SpecularColor;

uniform float3 RimLitColor;
uniform float RimLitIntensity;
uniform float RimLitPower;
uniform float RimLightClampFactor;

uniform float ShadowReceiveOffset;

uniform float SphereMapIntensity;
uniform float CubeMapIntensity;
uniform float CubeMapFresnel;

uniform float2 DuDvMapImageSize;
uniform float2 DuDvScale;

uniform float BloomIntensity;
uniform float GlareIntensity;

uniform float4 GameEdgeParameters;
uniform float4 OutlineColorFactor;

uniform float4 PointLightParams;
uniform float4 PointLightColor;

uniform float4x4 BoneTransforms[NUM_SKIN_TRANSFORMS];
};

/*-------------------------ed8_chr.cgfx----------------------------*/

//=============================================================================
// マテリアルスイッチのプリプロセス(copy from ed8_chr.cgfx)
//=============================================================================

// ブルームは常時ON
#define BLOOM_ENABLED

// Maya上では機能しないスイッチを無効化
#if defined(DCC_TOOL)
	#undef CASTS_SHADOWS
	#undef RECEIVE_SHADOWS
	#undef USE_OUTLINE
#endif

// DUDVとマルチテクスチャは排他
#if defined(DUDV_MAPPING_ENABLED)
	#undef MULTI_UV_ENANLED
	#undef MULTI_UV2_ENANLED
#endif

// 非マルチテクスチャなら関連スイッチを無効化
#if !defined(MULTI_UV_ENANLED)
	#undef MULTI_UV_ADDITIVE_BLENDING_ENANLED
	#undef MULTI_UV_MULTIPLICATIVE_BLENDING_ENANLED
	#undef MULTI_UV_NORMAL_MAPPING_ENABLED
	#undef MULTI_UV_SPECULAR_MAPPING_ENABLED
	#undef MULTI_UV_GLARE_MAP_ENABLED
	#undef MULTI_UV_NO_DIFFUSE_MAPPING_ENANLED
	#undef MULTI_UV2_ENANLED
	#undef MULTI_UV2_ADDITIVE_BLENDING_ENANLED
	#undef MULTI_UV2_MULTIPLICATIVE_BLENDING_ENANLED
	#undef MULTI_UV2_NORMAL_MAPPING_ENABLED
	#undef MULTI_UV2_SPECULAR_MAPPING_ENABLED
#endif // !defined(MULTI_UV_ENANLED)

#if defined(MULTI_UV_NO_DIFFUSE_MAPPING_ENANLED)
	#undef MULTI_UV_ADDITIVE_BLENDING_ENANLED
	#undef MULTI_UV_MULTIPLICATIVE_BLENDING_ENANLED
#endif

// マルチUV2と排他なものを無効化
#if defined(MULTI_UV2_ENANLED)
	#undef SPHERE_MAPPING_ENABLED
	#undef SPHERE_MAPPING_HAIRCUTICLE_ENABLED
	#undef CUBE_MAPPING_ENABLED
#endif

#if defined(SPHERE_MAPPING_ENABLED)
	#undef SPHERE_MAPPING_HAIRCUTICLE_ENABLED
#endif

#if !defined(ALPHA_BLENDING_ENABLED)
	#undef ADDITIVE_BLENDING_ENABLED
	#undef SUBTRACT_BLENDING_ENABLED
	#undef MULTIPLICATIVE_BLENDING_ENABLED
#endif

#if !defined(DCC_TOOL)
	#define GAME_MATERIAL_ENABLED
	#define UVA_SCRIPT_ENABLED
#endif

#define USE_POSITION_HALF	// 変換済み座標をhalfで処理

#if defined(NUM_LIGHTS)
	#if (NUM_LIGHTS > 0) && !defined(NO_ALL_LIGHTING_ENABLED)
		#define USE_LIGHTING
	#endif
#endif

#if defined(RECEIVE_SHADOWS)
	#if defined(NUM_LIGHTS)
		#if NUM_LIGHTS == 0
			#undef RECEIVE_SHADOWS
		#endif
	#else
		#undef RECEIVE_SHADOWS
	#endif
	#if !defined(SHADOWTYPE_0)
		#undef RECEIVE_SHADOWS
	#endif
#endif // defined(RECEIVE_SHADOWS)

#if defined(NORMAL_MAPPING_ENABLED) || defined(MULTI_UV_NORMAL_MAPPING_ENABLED)
	#define USE_TANGENTS
#endif

#if defined(ADDITIVE_BLENDING_ENABLED) || defined(SUBTRACT_BLENDING_ENABLED) || defined(MULTIPLICATIVE_BLENDING_ENABLED)
	#define USE_EXTRA_BLENDING
#endif

#if !defined(DCC_TOOL)
	// 「CARTOON_SHADING_ENABLED = キャラ」と判断している
	#if defined(FORCE_CHAR_LIGHT_DIRECTION_ENABLED) || defined(CARTOON_SHADING_ENABLED)
		#define LIGHT_DIRECTION_FOR_CHARACTER_ENABLED
	#endif
#endif

#if defined(CARTOON_SHADING_ENABLED)
	#define CARTOON_AVOID_SELFSHADOW_OFFSET
#endif

#if defined(DUDV_MAPPING_ENABLED)
	#define USE_SCREEN_UV
#endif

//=============================================================================
// グローバルシェーダパラメータ
//=============================================================================


//=============================================================================
// シェーダ入出力構造体
//=============================================================================
struct DefaultVPInput
{
#if defined(SKINNING_ENABLED)
	float3 SkinnableVertex;
	float3 SkinnableNormal;
#else
	float3 Position;
	float3 Normal;
#endif
	float2 TexCoord;
#if defined(VERTEX_COLOR_ENABLED)
	float4 Color;
#endif

#if defined(USE_TANGENTS)
	#if defined(SKINNING_ENABLED)
		float3 SkinnableTangent;
	#else
		float3 Tangent;
	#endif
#endif

#if defined(SKINNING_ENABLED)
	int4 SkinIndices;
	float4 SkinWeights;
#endif

#if defined(MULTI_UV_ENANLED)
	float2 TexCoord2;
#endif
#if defined(MULTI_UV2_ENANLED)
	float2 TexCoord3;
#endif

};

// 補足:
// - 変換済み座標はhalfで処理（精度面で問題が出るようならfloatに戻す）。
// - テクスチャ座標はfloatで処理。ゆっくりスクロールさせたい場合などにhalfだと精度が足りずカクつくため。
struct DefaultVPOutput
{
#if defined(USE_POSITION_HALF)
	half4 Position;
#else
	float4 Position;
#endif

	half4 Color0;
	half4 Color1;		// xyz = 点光源による加算色, w = フォグ計算結果

	float2 TexCoord;

	float4 WorldPositionDepth;	// xyz = ワールド座標, w = 視線方向のZ値

#if defined(DUDV_MAPPING_ENABLED)
	float2 DuDvTexCoord;
#elif defined(MULTI_UV_ENANLED)
	float2 TexCoord2;
#endif

#if defined(RECEIVE_SHADOWS)
	half4 Normal;	// w = 傾斜によるシャドウマップ補正値
#else
	half3 Normal;
#endif

#if defined(USE_LIGHTING) && defined(USE_TANGENTS)
	half3 Tangent;
#endif

#if defined(MULTI_UV2_ENANLED)
	float2 TexCoord3;
#endif

#if defined(USE_SCREEN_UV)
	half4 ReflectionMap;
#endif

#if !defined(USE_TANGENTS) || !defined(USE_LIGHTING)
	#if defined(SPHERE_MAPPING_HAIRCUTICLE_ENABLED)
		half3 SphereMap;
	#elif defined(SPHERE_MAPPING_ENABLED)
		half2 SphereMap;
	#elif defined(CUBE_MAPPING_ENABLED)
		half4 CubeMap;
	#endif
#endif
};


//-----------------------------------------------------------------------------
// 輪郭用
//-----------------------------------------------------------------------------
struct OutlineVPInput
{
#if defined(SKINNING_ENABLED)
	float3 SkinnableVertex;
	float3 SkinnableNormal;
#else
	float3 Position;
	float3 Normal;
#endif

#if defined(VERTEX_COLOR_ENABLED)
	float4 Color;
#endif
	float2 TexCoord;

#if defined(SKINNING_ENABLED)
	int4 SkinIndices;
	float4 SkinWeights;
#endif
};

struct OutlineVPOutput
{
#if defined(USE_POSITION_HALF)
	half4 Position;
#else
	float4 Position;
#endif

	half4 Color0;
	half4 Color1;		// フォグ
	half2 TexCoord;		// xy = テクスチャ座標, z = Fog
};

//-----------------------------------------------------------------------------
// 深度値用
//-----------------------------------------------------------------------------
#define TransparentDepthVPOutput	OutlineVPOutput


/*-------------------------ed8_chr.cgfx----------------------------*/

//=============================================================================
// サブルーチン
//=============================================================================


/*-------------------------ed8_common.h----------------------------*/

/*
float2 GetGlobalTextureFactor()
{
	return GlobalTexcoordFactor;
}
*/

half ClampPlusMinusOneToNonNegative(half value)
{
	return saturate(value);
}

float4 GenerateScreenProjectedUv(float4 projPosition)
{
	float2 clipSpaceDivided = projPosition.xy / float2(projPosition.w, -projPosition.w);
	float2 tc = clipSpaceDivided.xy * 0.5 + 0.5;
	return float4(tc.x * projPosition.w, tc.y * projPosition.w, 0, projPosition.w);
}

float3 GetEyePosition()
{
	return scene.EyePosition;
}

half3 EvaluatePointLight(half3 position, half3 normal)
{
	if (PointLightParams.w > 0) {
		half3 offset = PointLightParams.xyz - position;
		half vecLengthSqr = dot(offset, offset);
		if (vecLengthSqr > 0) {
			half vecLength = sqrt(vecLengthSqr);
			half3 lightDir = offset / vecLength;
			half atten = min(vecLength / PointLightParams.w, 1);
			atten *= atten;
			atten = 1 - atten;
			half nDotL = dot(normal, lightDir);
			nDotL = nDotL * 0.5 + 0.5;
			nDotL *= nDotL;
			return half3(PointLightColor.xyz * atten * nDotL);
		} else {
			return half3(PointLightColor.xyz);
		}
	}
	return half3(0);
}

//-----------------------------------------------------------------------------
// フォグ
//-----------------------------------------------------------------------------
float EvaluateFogValue(float3 viewPosition)
{

	float f = saturate((-viewPosition.z - scene.FogRangeParameters.x) * scene.FogRangeParameters.z);
	f *= scene.FogRangeParameters.w;
	return f;
}


#if defined(RECEIVE_SHADOWS)
//-----------------------------------------------------------------------------
// シャドウマップ
//-----------------------------------------------------------------------------
// 影濃度のバイアス値を求める（深度）
half EvaluateShadowDensityBias_Depth(CombinedCascadedShadowMap shadow, float viewDepth)
{
	half bias = 1.0;

	//
	// 二分割
	//

	if (viewDepth > shadow.m_splitDistances.y)
	{
		return 1.0;
	}

	if (viewDepth < shadow.m_splitDistances.x)
	{
		// 近
		bias = 0.0;
	}
	else
	{
		// 遠
		bias = saturate((viewDepth - shadow.m_splitDistances.x) / (shadow.m_splitDistances.y - shadow.m_splitDistances.x));
	}

	bias = pow(bias, 3);
	return bias;
}

// 影濃度のバイアス値を求める（高さ）
half EvaluateShadowDensityBias_Height(float y)
{
	if (scene.MiscParameters2.x > 0)
	{
		half bias = min(abs(y - scene.MiscParameters2.y) * scene.MiscParameters2.x, 1);
		bias = pow(bias, 3);
		return bias;
	}
	return 0.0;
}

// 影濃度のバイアス値を求める（傾斜）
half EvaluateShadowDensityBias_Angle(float3 normal, float3 lightDir)
{
	half bias = dot(normal, lightDir);
	bias = bias * 0.5 + 0.5;
	bias = 1 - bias;
	return bias;
}

#endif // defined(RECEIVE_SHADOWS)

//-----------------------------------------------------------------------------
// スキニング
//-----------------------------------------------------------------------------
#if defined(SKINNING_ENABLED)

void EvaluateSkinPositionNormalTangent3Bones(inout float3 position, inout float3 normal, inout float3 tangent, float4 weights, int4 boneIndices, float3x4 skinTransforms[NUM_SKIN_TRANSFORMS])
{
	int indexArray[3] = {boneIndices.x, boneIndices.y, boneIndices.z};

	float4 inPosition = float4(position, 1);
	float4 inNormal = float4(normal, 0);
	float4 inTangent = float4(tangent, 0);
	float scale = 1.0 / (weights.x + weights.y + weights.z);
	
 	position = 
		mul(skinTransforms[indexArray[0]], inPosition).xyz * (weights.x * scale)
	+	mul(skinTransforms[indexArray[1]], inPosition).xyz * (weights.y * scale)
	+	mul(skinTransforms[indexArray[2]], inPosition).xyz * (weights.z * scale);
	
	normal = 
		mul(skinTransforms[indexArray[0]], inNormal).xyz * (weights.x * scale)
	+	mul(skinTransforms[indexArray[1]], inNormal).xyz * (weights.y * scale)
	+	mul(skinTransforms[indexArray[2]], inNormal).xyz * (weights.z * scale);

	tangent = 
		mul(skinTransforms[indexArray[0]], inTangent).xyz * (weights.x * scale)
	+	mul(skinTransforms[indexArray[1]], inTangent).xyz * (weights.y * scale)
	+	mul(skinTransforms[indexArray[2]], inTangent).xyz * (weights.z * scale);
}

void EvaluateSkinPositionNormal3Bones(inout float3 position, inout float3 normal, float4 weights, int4 boneIndices, float3x4 skinTransforms[NUM_SKIN_TRANSFORMS])
{
	int indexArray[3] = {boneIndices.x, boneIndices.y, boneIndices.z};

	float4 inPosition = float4(position, 1);
	float4 inNormal = float4(normal, 0);
	float scale = 1.0 / (weights.x + weights.y + weights.z);
	
 	position = 
		mul(skinTransforms[indexArray[0]], inPosition).xyz * (weights.x * scale)
	+	mul(skinTransforms[indexArray[1]], inPosition).xyz * (weights.y * scale)
	+	mul(skinTransforms[indexArray[2]], inPosition).xyz * (weights.z * scale);
	
	normal = 
		mul(skinTransforms[indexArray[0]], inNormal).xyz * (weights.x * scale)
	+	mul(skinTransforms[indexArray[1]], inNormal).xyz * (weights.y * scale)
	+	mul(skinTransforms[indexArray[2]], inNormal).xyz * (weights.z * scale);
}

void EvaluateSkinPosition3Bones(inout float3 position, float4 weights, int4 boneIndices, float3x4 skinTransforms[NUM_SKIN_TRANSFORMS])
{
	int indexArray[3] = {boneIndices.x, boneIndices.y, boneIndices.z};

	float4 inPosition = float4(position, 1);
	float scale = 1.0 / (weights.x + weights.y + weights.z);
 	position = 
		mul(skinTransforms[indexArray[0]], inPosition).xyz * (weights.x * scale)
	+	mul(skinTransforms[indexArray[1]], inPosition).xyz * (weights.y * scale)
	+	mul(skinTransforms[indexArray[2]], inPosition).xyz * (weights.z * scale);
}

#define EvaluateSkinPositionNormalTangentXBones	EvaluateSkinPositionNormalTangent3Bones
#define EvaluateSkinPositionNormalXBones 		EvaluateSkinPositionNormal3Bones
#define EvaluateSkinPositionXBones				EvaluateSkinPosition3Bones

#endif // defined(SKINNING_ENABLED)

/*-------------------------ed8_common.h----------------------------*/

//=============================================================================
// 頂点・フラグメントシェーダ
//=============================================================================
#if defined(main_DefaultVPShader) || defined(main_PortraitVPShader)

#if defined(main_DefaultVPShader)
	#define VP_DEFAULT
	DefaultVPOutput DefaultVPShader(DefaultVPInput IN)
#endif

#if defined(main_PortraitVPShader)
	#define VP_PORTRAIT
	DefaultVPOutput PortraitVPShader(DefaultVPInput IN)
#endif
{

	DefaultVPOutput OUT;

#if defined(USE_TANGENTS)
	#if defined(SKINNING_ENABLED)
		float3 tangent = IN.SkinnableTangent;
	#else
		float3 tangent = IN.Tangent;
	#endif
#endif

#if defined(SKINNING_ENABLED)
	float3 normal = IN.SkinnableNormal;
#else
	float3 normal = IN.Normal;
#endif

#if defined(SKINNING_ENABLED)
	float3 position = IN.SkinnableVertex.xyz;
#else
	float3 position = IN.Position.xyz;
#endif

#if defined(SKINNING_ENABLED)

	#if defined(USE_LIGHTING)
		#if defined(USE_TANGENTS)
			EvaluateSkinPositionNormalTangentXBones(position, normal, tangent, IN.SkinWeights, int4(IN.SkinIndices), BoneTransforms);
		#else
			EvaluateSkinPositionNormalXBones(position, normal, IN.SkinWeights, int4(IN.SkinIndices), BoneTransforms);
		#endif
	#else
		EvaluateSkinPositionXBones(position, IN.SkinWeights, int4(IN.SkinIndices), BoneTransforms);
	#endif

	float3 worldSpacePosition = position;
	float3 worldSpaceNormal = normalize(normal);

	#if defined(USE_LIGHTING) && defined(USE_TANGENTS)
		tangent = normalize(tangent);
	#endif

#else // defined(SKINNING_ENABLED)

	float3 worldSpacePosition = _mul(World, float4(position, 1)).xyz;
	float3 worldSpaceNormal = normalize(_mul(World, float4(normal, 0)).xyz);

	#if defined(USE_LIGHTING) && defined(USE_TANGENTS)
		tangent = normalize(_mul(World, float4(tangent, 0)).xyz);
	#endif

#endif // defined(SKINNING_ENABLED)

	OUT.Position = _mul(scene.ViewProjection, float4(worldSpacePosition, 1));
	OUT.WorldPositionDepth = float4(worldSpacePosition.xyz, -_mul(scene.View, float4(worldSpacePosition, 1)).z);
	OUT.Normal.xyz = half3(worldSpaceNormal);
#if defined(USE_LIGHTING) && defined(USE_TANGENTS)
	OUT.Tangent = half3(tangent);
#endif

	float3 viewSpacePosition = _mul(scene.View, float4(worldSpacePosition, 1)).xyz;

	OUT.TexCoord.xy = half2(IN.TexCoord.xy) * half2(GameMaterialTexcoord.zw) + half2(GameMaterialTexcoord.xy);

	// マルチUV
#if defined(DUDV_MAPPING_ENABLED)

	OUT.DuDvTexCoord.xy = IN.TexCoord.xy * half2(UVaDuDvTexcoord.zw) + half2(UVaDuDvTexcoord.xy);

#elif defined(MULTI_UV_ENANLED)

		OUT.TexCoord2.xy = IN.TexCoord2.xy * half2(UVaMUvTexcoord.zw) + half2(UVaMUvTexcoord.xy);

#endif // defined(DUDV_MAPPING_ENABLED)

	// マルチUV2
#if defined(MULTI_UV2_ENANLED)

		OUT.TexCoord3.xy = IN.TexCoord3.xy * half2(UVaMUv2Texcoord.zw) + half2(UVaMUv2Texcoord.xy);

#endif // defined(MULTI_UV2_ENANLED)

	// 頂点カラー
#if defined(VERTEX_COLOR_ENABLED)
	OUT.Color0 = min(half4(1, 1, 1, 1), half4(IN.Color.r, IN.Color.g, IN.Color.b, IN.Color.a));
#else
	OUT.Color0 = half4(1);
#endif

	// 点光源
	OUT.Color1.rgb = EvaluatePointLight(worldSpacePosition, worldSpaceNormal);


	// フォグ
#if defined(FOG_ENABLED)
	OUT.Color1.a = EvaluateFogValue(viewSpacePosition);
#else
	OUT.Color1.a = 0.0;
#endif

	// 水面
#if defined(USE_SCREEN_UV)
	OUT.ReflectionMap = GenerateScreenProjectedUv(OUT.Position);
#endif

	// スフィア／キューブマップ（頂点単位）
#if !defined(USE_TANGENTS) || !defined(USE_LIGHTING)
	#if defined(SPHERE_MAPPING_ENABLED)
		float3 viewSpaceNormal = float3(_mul(float3x3(scene.View), worldSpaceNormal));
		OUT.SphereMap.xy = viewSpaceNormal.xy * 0.5 + half2(0.5, 0.5);
	#elif defined(SPHERE_MAPPING_HAIRCUTICLE_ENABLED)
		// カメラ角度によって映りこみ角度が変わる
		float3 worldSpaceEyeDirection = normalize(GetEyePosition() - worldSpacePosition);
		OUT.SphereMap.xy = reflect(-worldSpaceEyeDirection, worldSpaceNormal).xy * 0.5 + half2(0.5, 0.5);
		OUT.SphereMap.z = half(pow(1.0 - abs(worldSpaceEyeDirection.y), 2));
		OUT.SphereMap.z *= half(pow(dot(-worldSpaceEyeDirection, worldSpaceNormal.xyz), 2));
	#elif defined(CUBE_MAPPING_ENABLED)
		float3 worldSpaceEyeDirection = normalize(GetEyePosition() - worldSpacePosition);
		half ndote = dot(worldSpaceNormal, worldSpaceEyeDirection);
		OUT.CubeMap = half4(reflect(-worldSpaceEyeDirection, worldSpaceNormal), 1.0 - max(0, ndote) * CubeMapFresnel);
	#endif // defined(SPHERE_MAPPING_ENABLED)
#endif // !defined(USE_TANGENTS) || !defined(USE_LIGHTING)

#if defined(RECEIVE_SHADOWS)
	half shadowDensityBias = EvaluateShadowDensityBias_Depth(LightShadow0, OUT.WorldPositionDepth.w);
	shadowDensityBias += EvaluateShadowDensityBias_Height(OUT.WorldPositionDepth.y);
	shadowDensityBias += EvaluateShadowDensityBias_Angle(worldSpaceNormal, scene.MiscParameters1.xyz);
	OUT.Normal.w = min(1, shadowDensityBias);
#endif // defined(RECEIVE_SHADOWS)

	return OUT;
}

in	DefaultVPInput IN;
out	DefaultVPOutput OUT;
out gl_PerVertex
{
    vec4 gl_Position;
};

void main()
{
	DefaultVPInput IN_ = IN;

#if defined(main_DefaultVPShader)
	OUT = DefaultVPShader(IN_);
#else
	OUT = PortraitVPShader(IN_);
#endif

	gl_Position	= OUT.Position;
}

#endif //defined(main_DefaultVPShader) || defined(main_PortraitVPShader)


//-----------------------------------------------------------------------------
// 輪郭用
//-----------------------------------------------------------------------------
#ifdef main_OutlineDefaultVPShader

#if defined(USE_OUTLINE)
OutlineVPOutput OutlineDefaultVPShader(OutlineVPInput IN)
{
	OutlineVPOutput OUT;

	#if defined(SKINNING_ENABLED)
	
		float3 position = IN.SkinnableVertex.xyz;
		float3 normal = IN.SkinnableNormal;
		
		EvaluateSkinPositionNormalXBones(position, normal, IN.SkinWeights, int4(IN.SkinIndices), BoneTransforms);
		
		float3 worldSpacePosition = position;
		float3 worldSpaceNormal = normalize(normal);
		

	#else // defined(SKINNING_ENABLED)

		float3 worldSpacePosition = _mul(World, float4(IN.Position.xyz, 1)).xyz;
		float3 worldSpaceNormal = normalize(_mul(World, float4(IN.Normal, 0)).xyz);
	#endif // defined(SKINNING_ENABLED)

	// 線の太さを維持（手前はやや太くなるように調整）
	float depthBias = _mul(scene.ViewProjection, float4(worldSpacePosition, 1)).w;
	depthBias = clamp(depthBias, 0.3,1.0);
	worldSpacePosition += (worldSpaceNormal * GameEdgeParameters.w * depthBias);

	// 髪の毛など一枚ポリでは前面に出ることがあるため奥に少しずらす。
	worldSpacePosition += normalize(worldSpacePosition - GetEyePosition()) * (GameEdgeParameters.w + 0.001);

	OUT.Position = _mul(scene.ViewProjection, float4(worldSpacePosition, 1));

	OUT.TexCoord.xy = IN.TexCoord.xy;
	
	// 輪郭色
	float4	outlineColor = float4(GameEdgeParameters.xyz,1);	// デフォルト色

	
	// 環境＋平行光の影響
	half3 ambientColor = OutlineColorFactor.rgb;
	outlineColor.rgb = outlineColor.rgb * ambientColor.rgb;
	
	OUT.Color0 = outlineColor;
	
	// フォグ
	OUT.Color1.rgb = half3(0);
#if defined(FOG_ENABLED)
	float3 viewSpacePosition = _mul(scene.View, float4(worldSpacePosition, 1)).xyz;
	OUT.Color1.a = EvaluateFogValue(viewSpacePosition);
#else
	OUT.Color1.a = half(0);
#endif

	return OUT;
}

in	OutlineVPInput IN;
out	OutlineVPOutput OUT;
out gl_PerVertex
{
    vec4 gl_Position;
};

void main()
{
	OutlineVPInput IN_ = IN;
	OUT = OutlineDefaultVPShader(IN_);
	
	gl_Position		= OUT.Position;
}

#endif // defined(USE_OUTLINE)

#endif //  main_OutlineDefaultVPShader

//-----------------------------------------------------------------------------
// 深度値のみ書き込み用(DefaultVPShaderの形状計算のみ）
//-----------------------------------------------------------------------------
#ifdef main_ForceTransparentDepthVPShader

TransparentDepthVPOutput ForceTransparentDepthVPShader(DefaultVPInput IN)
{
	TransparentDepthVPOutput OUT;
	
#if defined(USE_TANGENTS)
	#if defined(SKINNING_ENABLED)
		float3 tangent = IN.SkinnableTangent;
	#else
		float3 tangent = IN.Tangent;
	#endif
#endif

#if defined(SKINNING_ENABLED)
	float3 normal = IN.SkinnableNormal;
#else
	float3 normal = IN.Normal;
#endif

#if defined(SKINNING_ENABLED)
	float3 position = IN.SkinnableVertex.xyz;
#else
	float3 position = IN.Position.xyz;
#endif

#if defined(SKINNING_ENABLED)

	#if defined(USE_LIGHTING)
		#if defined(USE_TANGENTS)
			EvaluateSkinPositionNormalTangentXBones(position, normal, tangent, IN.SkinWeights, int4(IN.SkinIndices), BoneTransforms);
		#else
			EvaluateSkinPositionNormalXBones(position, normal, IN.SkinWeights, int4(IN.SkinIndices), BoneTransforms);
		#endif
	#else
		EvaluateSkinPositionXBones(position, IN.SkinWeights, int4(IN.SkinIndices), BoneTransforms);
	#endif
	

	float3 worldSpacePosition = position;
	

#else // defined(SKINNING_ENABLED)

	float3 worldSpacePosition = _mul(World, float4(position, 1)).xyz;

#endif // defined(SKINNING_ENABLED)


	OUT.Position = _mul(scene.ViewProjection, float4(worldSpacePosition, 1));
	OUT.TexCoord.xy = IN.TexCoord.xy;
	
	// 頂点カラー
#if defined(VERTEX_COLOR_ENABLED)
	OUT.Color0 = min(half4(1, 1, 1, 1), half4(IN.Color.r, IN.Color.g, IN.Color.b, IN.Color.a));
#else
	OUT.Color0 = half4(1);
#endif

	OUT.Color1.rgba = half4(0);
	return OUT;
}

in	DefaultVPInput IN;
out	TransparentDepthVPOutput OUT;
out gl_PerVertex
{
    vec4 gl_Position;
};

void main()
{
	DefaultVPInput IN_ = IN;
	OUT = ForceTransparentDepthVPShader(IN_);
	
	gl_Position		= OUT.Position;
}

#endif