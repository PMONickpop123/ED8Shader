
#define FPS_MAX	30

struct DirectionalLight
{
	half3 m_direction;
	half3 m_colorIntensity;
};

// 影受けバイアス値
#define SHADOW_LIGHTDIR_BIAS	0.05
#define SHADOW_NORMALDIR_BIAS	0.05

struct CombinedCascadedShadowMap
{
	// 二分割
	float4x4 m_split0Transform;
	float4x4 m_split1Transform;

	float4 m_splitDistances;
};

#define NUM_SKIN_TRANSFORMS	160
layout(std140) uniform Param
{
uniform SceneWideParameters scene;

uniform float4x4 World;
uniform float GlobalTexcoordFactor;
uniform float FogRatio;
uniform float2 WindyGrassDirection;
uniform float WindyGrassSpeed;
uniform float WindyGrassHomogenity;
uniform float WindyGrassScale;

uniform DirectionalLight Light0;
uniform CombinedCascadedShadowMap LightShadow0;
uniform float EncodedMainLightClampFactor;
uniform float4 GameMaterialDiffuse;
uniform float4 GameMaterialEmission;
uniform float GameMaterialMonotone;
uniform float4 GameMaterialTexcoord;
uniform float4 GameDitherParams;
uniform float4 UVaMUvColor;
uniform float4 UVaProjTexcoord;
uniform float4 UVaMUvTexcoord;
uniform float4 UVaMUv2Texcoord;
uniform float4 UVaDuDvTexcoord;
uniform float AlphaThreshold;
uniform float3 ShadowColorShift;
uniform float Shininess;
uniform float SpecularPower;
uniform float3 SpecularColor;
uniform float3 RimLitColor;
uniform float RimLitIntensity;
uniform float RimLitPower;
uniform float RimLightClampFactor;
uniform float BlendMulScale2;
uniform float BlendMulScale3;
uniform float SphereMapIntensity;
uniform float CubeMapIntensity;
uniform float CubeMapFresnel;
uniform float2 ProjectionScale;
uniform float2 DuDvMapImageSize;
uniform float2 DuDvScale;
uniform float BloomIntensity;
uniform float GlareIntensity;
uniform float ReflectionIntensity;
uniform float ReflectionFresnel;
uniform float MaskEps;
uniform float4 PointLightParams;
uniform float4 PointLightColor;

uniform float4x4 BoneTransforms[NUM_SKIN_TRANSFORMS];
};

//=============================================================================
// マテリアルスイッチのプリプロセス
//=============================================================================

// 水面反射モデルに対する軽量化
#if defined(USER_CLIP_PLANE)
	#if !defined(INSTANCING_ENABLED)	//ノーマル切ると正しく表示されないインスタンスがある
	#undef NORMAL_MAPPING_ENABLED
	#undef MULTI_UV_NORMAL_MAPPING_ENABLED
	#endif
	#undef CASTS_SHADOWS
	#undef RECEIVE_SHADOWS
#endif // defined(USER_CLIP_PLANE)

// 非マルチテクスチャなら関連スイッチを無効化
#if !defined(MULTI_UV_ENANLED)
	#undef MULTI_UV_ADDITIVE_BLENDING_ENANLED
	#undef MULTI_UV_MULTIPLICATIVE_BLENDING_ENANLED
	#undef MULTI_UV_MULTIPLICATIVE_BLENDING_LM_ENANLED
	#undef MULTI_UV_MULTIPLICATIVE_BLENDING_EX_ENANLED
	#undef MULTI_UV_NORMAL_MAPPING_ENABLED
	#undef MULTI_UV_SPECULAR_MAPPING_ENABLED
	#undef MULTI_UV_GLARE_MAP_ENABLED
	#undef MULTI_UV2_ENANLED
	#undef MULTI_UV2_ADDITIVE_BLENDING_ENANLED
	#undef MULTI_UV2_MULTIPLICATIVE_BLENDING_ENANLED
	#undef MULTI_UV2_MULTIPLICATIVE_BLENDING_LM_ENANLED
	#undef MULTI_UV2_MULTIPLICATIVE_BLENDING_EX_ENANLED
#endif // !defined(MULTI_UV_ENANLED)

#if defined(NORMAL_MAPPING_ENABLED) || defined(MULTI_UV_NORMAL_MAPPING_ENABLED)
	#define USE_TANGENTS
#endif

//=============================================================================
// シェーダ入出力構造体
//=============================================================================
#if defined(INSTANCING_ENABLED)
struct InstancingInput
{
	float4 InstanceTransform0;
	float4 InstanceTransform1;
	float4 InstanceTransform2;
	float4 InstanceColor;
};
layout (location = 12) in InstancingInput instancingInput;
#endif // defined(INSTANCING_ENABLED)

struct DefaultVPInput
{
#if defined(SKINNING_ENABLED)
	float3 SkinnableVertex;
	float3 SkinnableNormal;
#else
	float3 Position;
	float3 Normal;
#endif
	float2 TexCoord;
#if defined(VERTEX_COLOR_ENABLED)
	float4 Color;
#endif

#if defined(USE_TANGENTS)
		#if defined(SKINNING_ENABLED)
	float3 SkinnableTangent;
		#else
	float3 Tangent;
		#endif
#endif

#if defined(SKINNING_ENABLED)
	int4 SkinIndices;
	float4 SkinWeights;
#endif

#if defined(MULTI_UV_ENANLED)
	float2 TexCoord2;
#endif
#if defined(MULTI_UV2_ENANLED)
	float2 TexCoord3;
#endif

#if defined(INSTANCING_ENABLED)
	InstancingInput instancingInput;
#endif
};

struct DefaultVPOutput
{
	float4 Position;
	half4 Color0;
	half4 Color1;		// xyz = 未使用, w = フォグ計算結果
	float2 TexCoord;
	float4 WorldPositionDepth;	// xyz = ワールド座標, w = 視線方向のZ値

	float2 TexCoord2;

	float2 ProjMap;

	float3 Normal;

	float2 DuDvTexCoord;

	float3 Tangent;

	float2 TexCoord3;

	float4 instanceParam;

	float4 wvpPos;
};

#if defined(USE_MRT)
struct DefaultFPOutputMRT
{
	float4 Color;	// rgb = 色, a = 輝度（ブルーム用）
	float4 Normal;	// rgb = 法線（0.0～1.0に正規化）, a = ライティング上限
	float4 Depth;	// rgb = 深度（精度維持のためエンコード）, a = マスク
};
#endif // defined(USE_MRT)

//-----------------------------------------------------------------------------
// 深度値用
//-----------------------------------------------------------------------------
struct TransparentDepthVPOutput
{
	float4 Position;
	half4 Color0;
	float2 TexCoord;	// xy = テクスチャ座標, z = Fog
};

//=============================================================================
// サブルーチン
//=============================================================================

float2 GetGlobalTextureFactor()
{
	return float2(GlobalTexcoordFactor);
}

//-----------------------------------------------------------------------------
// インスタンシング
//-----------------------------------------------------------------------------
#if defined(INSTANCING_ENABLED)
void ApplyInstanceTransformVertex(InstancingInput IN, inout float3 toTransform)
{
	float3 instanceTransformedPosition;
	instanceTransformedPosition.x = dot(IN.InstanceTransform0, float4(toTransform,1));
	instanceTransformedPosition.y = dot(IN.InstanceTransform1, float4(toTransform,1));
	instanceTransformedPosition.z = dot(IN.InstanceTransform2, float4(toTransform,1));
	toTransform = instanceTransformedPosition;
}

void ApplyInstanceTransformNormal(InstancingInput IN, inout float3 toTransform)
{
	float3 instanceTransformedNormal;
	instanceTransformedNormal.x = dot(IN.InstanceTransform0.xyz, toTransform);
	instanceTransformedNormal.y = dot(IN.InstanceTransform1.xyz, toTransform);
	instanceTransformedNormal.z = dot(IN.InstanceTransform2.xyz, toTransform);
	toTransform = instanceTransformedNormal;
}

float EvaluateDitherValue(float3 viewPosition, float n, float r)
{
	float t = saturate((-viewPosition.z - n) * r);
	return 1 - t;
}
#endif // defined(INSTANCING_ENABLED)

//-----------------------------------------------------------------------------
// フォグ
//-----------------------------------------------------------------------------
float EvaluateFogValue(float3 viewPosition, float worldY)
{
	float f = saturate((-viewPosition.z - scene.FogRangeParameters.x) * scene.FogRangeParameters.z);
	float h = saturate((worldY - scene.MiscParameters3.x) * scene.MiscParameters3.y);
	h *= min(1, f + scene.MiscParameters3.z);
	f = min(1, f + h);
	#if defined(FOG_RATIO_ENABLED)
	f *= FogRatio;
	#endif
	f *= scene.FogRangeParameters.w;
	return f;
}

//-----------------------------------------------------------------------------
// スキニング
//-----------------------------------------------------------------------------
#if defined(SKINNING_ENABLED)

void EvaluateSkinPositionNormalTangent4Bones(inout float3 position, inout float3 normal, inout float3 tangent, float4 weights, int4 boneIndices, float4x4 skinTransforms[NUM_SKIN_TRANSFORMS])
{
	int indexArray[4] = int[](boneIndices.x, boneIndices.y, boneIndices.z, boneIndices.w);

	float4 inPosition = float4(position, 1);
	float4 inNormal = float4(normal, 0);
	float4 inTangent = float4(tangent, 0);
	
 	position = 
		mul(skinTransforms[indexArray[0]], inPosition).xyz * weights.x
	+	mul(skinTransforms[indexArray[1]], inPosition).xyz * weights.y
	+	mul(skinTransforms[indexArray[2]], inPosition).xyz * weights.z
	+	mul(skinTransforms[indexArray[3]], inPosition).xyz * weights.w;
	
	normal = 
		mul(skinTransforms[indexArray[0]], inNormal).xyz * weights.x
	+	mul(skinTransforms[indexArray[1]], inNormal).xyz * weights.y
	+	mul(skinTransforms[indexArray[2]], inNormal).xyz * weights.z
	+	mul(skinTransforms[indexArray[3]], inNormal).xyz * weights.w;

	tangent = 
		mul(skinTransforms[indexArray[0]], inTangent).xyz * weights.x
	+	mul(skinTransforms[indexArray[1]], inTangent).xyz * weights.y
	+	mul(skinTransforms[indexArray[2]], inTangent).xyz * weights.z
	+	mul(skinTransforms[indexArray[3]], inTangent).xyz * weights.w;
}

void EvaluateSkinPositionNormal4Bones(inout float3 position, inout float3 normal, float4 weights, int4 boneIndices, float4x4 skinTransforms[NUM_SKIN_TRANSFORMS])
{
	int indexArray[4] = int[](boneIndices.x, boneIndices.y, boneIndices.z, boneIndices.w);

	float4 inPosition = float4(position, 1);
	float4 inNormal = float4(normal, 0);
	
 	position = 
		mul(skinTransforms[indexArray[0]], inPosition).xyz * weights.x
	+	mul(skinTransforms[indexArray[1]], inPosition).xyz * weights.y
	+	mul(skinTransforms[indexArray[2]], inPosition).xyz * weights.z
	+	mul(skinTransforms[indexArray[3]], inPosition).xyz * weights.w;
	
	normal = 
		mul(skinTransforms[indexArray[0]], inNormal).xyz * weights.x
	+	mul(skinTransforms[indexArray[1]], inNormal).xyz * weights.y
	+	mul(skinTransforms[indexArray[2]], inNormal).xyz * weights.z
	+	mul(skinTransforms[indexArray[3]], inNormal).xyz * weights.w;
}

void EvaluateSkinPosition4Bones(inout float3 position, float4 weights, int4 boneIndices, float4x4 skinTransforms[NUM_SKIN_TRANSFORMS])
{
	int indexArray[4] = int[](boneIndices.x, boneIndices.y, boneIndices.z, boneIndices.w);

	float4 inPosition = float4(position, 1);
	
 	position = 
		mul(skinTransforms[indexArray[0]], inPosition).xyz * weights.x
	+	mul(skinTransforms[indexArray[1]], inPosition).xyz * weights.y
	+	mul(skinTransforms[indexArray[2]], inPosition).xyz * weights.z
	+	mul(skinTransforms[indexArray[3]], inPosition).xyz * weights.w;
}

#define EvaluateSkinPositionNormalTangentXBones	EvaluateSkinPositionNormalTangent4Bones
#define EvaluateSkinPositionNormalXBones 		EvaluateSkinPositionNormal4Bones
#define EvaluateSkinPositionXBones				EvaluateSkinPosition4Bones

#endif // defined(SKINNING_ENABLED)

//-----------------------------------------------------------------------------
// 草ゆれ
//-----------------------------------------------------------------------------
#if defined(WINDY_GRASS_ENABLED)
	#if defined(WINDY_GRASS_TEXV_WEIGHT_ENABLED)
float3 calcWindyGrass(float3 position, float weight)
	#else
float3 calcWindyGrass(float3 position)
	#endif
{
	float2 curTime = GetGlobalTextureFactor();

	float k = position.x + position.z;
	float a = k * (1.0 / (WindyGrassHomogenity * WindyGrassHomogenity));
	float t = a * 0.25 + frac(a) + curTime.x * WindyGrassSpeed * FPS_MAX;

	#if defined(WINDY_GRASS_TEXV_WEIGHT_ENABLED)
	float2 dd = WindyGrassDirection * sin(t) * WindyGrassScale * weight;
	#else
	float2 dd = WindyGrassDirection * sin(t) * WindyGrassScale;
	#endif
	return position.xyz + float3(dd.x, 0, dd.y);
}
#endif // defined(WINDY_GRASS_ENABLED)

//=============================================================================
// 頂点・フラグメントシェーダ
//=============================================================================

#ifdef main_DefaultVPShader

#define VP_DEFAULT


#if defined(VP_DEFAULT)
DefaultVPOutput DefaultVPShader(DefaultVPInput IN)
#endif
{
	DefaultVPOutput OUT;

#if defined(USE_TANGENTS)
	#if defined(SKINNING_ENABLED)
	float3 tangent = IN.SkinnableTangent;
	#else
	float3 tangent = IN.Tangent;
	#endif
#endif

#if defined(SKINNING_ENABLED)
	float3 normal = IN.SkinnableNormal;
#else
	float3 normal = IN.Normal;
#endif

#if defined(SKINNING_ENABLED)
	float3 position = IN.SkinnableVertex.xyz;
#else
	float3 position = IN.Position.xyz;
#endif

#if defined(INSTANCING_ENABLED) && defined(FAR_CLIP_BY_DITHER_ENABLED)
	// 距離クリップされることが分かっているインスタンスには０スケールを掛けてピクセル負荷を抑える
	float3 instancePos = float3(IN.instancingInput.InstanceTransform0.w, IN.instancingInput.InstanceTransform1.w, IN.instancingInput.InstanceTransform2.w);
	float3 instancePosInView = _mul(scene.View, float4(instancePos, 1)).xyz;
	position *= (-instancePosInView.z) > GameDitherParams.z ? 0.0 : 1.0;
#endif // defined(INSTANCING_ENABLED) && defined(FAR_CLIP_BY_DITHER_ENABLED)

#if defined(SKINNING_ENABLED)
	#if defined(USE_TANGENTS)
	EvaluateSkinPositionNormalTangentXBones(position, normal, tangent, IN.SkinWeights, int4(IN.SkinIndices), BoneTransforms);
	#else
	EvaluateSkinPositionNormalXBones(position, normal, IN.SkinWeights, int4(IN.SkinIndices), BoneTransforms);
	#endif
#endif // defined(SKINNING_ENABLED)

#if defined(INSTANCING_ENABLED)
	ApplyInstanceTransformVertex(IN.instancingInput, position);
	ApplyInstanceTransformNormal(IN.instancingInput, normal);
	#if defined(USE_TANGENTS)
	ApplyInstanceTransformNormal(IN.instancingInput, tangent);
	#endif
#endif // defined(INSTANCING_ENABLED)

#if defined(SKINNING_ENABLED)

	float3 worldSpacePosition = position;
	float3 worldSpaceNormal = normalize(normal);
	#if defined(USE_TANGENTS)
	tangent = normalize(tangent);
	#endif

#else // defined(SKINNING_ENABLED)

	float3 worldSpacePosition = _mul(World, float4(position, 1)).xyz;
	float3 worldSpaceNormal = normalize(_mul(World, float4(normal, 0)).xyz);
	#if defined(USE_TANGENTS)
	tangent = normalize(_mul(World, float4(tangent, 0)).xyz);
	#endif

#endif // defined(SKINNING_ENABLED)

#if defined(WINDY_GRASS_ENABLED)
	#if defined(WINDY_GRASS_TEXV_WEIGHT_ENABLED)
	worldSpacePosition = calcWindyGrass(worldSpacePosition.xyz, IN.TexCoord.y);
	#else
	worldSpacePosition = calcWindyGrass(worldSpacePosition.xyz);
	#endif
#endif

	OUT.Position = _mul(scene.ViewProjection, float4(worldSpacePosition, 1));
	OUT.WorldPositionDepth = float4(worldSpacePosition.xyz, -_mul(scene.View, float4(worldSpacePosition, 1)).z);
#if defined(USE_MRT)
	OUT.wvpPos = OUT.Position;
#endif
	OUT.Normal = half3(worldSpaceNormal);
#if defined(USE_TANGENTS)
	OUT.Tangent = half3(tangent);
#endif

	float3 viewSpacePosition = _mul(scene.View, float4(worldSpacePosition, 1)).xyz;

	OUT.TexCoord.xy = half2(IN.TexCoord.xy) * half2(GameMaterialTexcoord.zw) + half2(GameMaterialTexcoord.xy);

	// DUDV
#if defined(DUDV_MAPPING_ENABLED)
	OUT.DuDvTexCoord.xy = IN.TexCoord.xy * half2(UVaDuDvTexcoord.zw) + half2(UVaDuDvTexcoord.xy);
#endif // defined(DUDV_MAPPING_ENABLED)

	// マルチUV
#if defined(MULTI_UV_ENANLED)
	OUT.TexCoord2.xy = IN.TexCoord2.xy * half2(UVaMUvTexcoord.zw) + half2(UVaMUvTexcoord.xy);
#endif // defined(MULTI_UV_ENANLED)

	// マルチUV2
#if defined(MULTI_UV2_ENANLED)
	OUT.TexCoord3.xy = IN.TexCoord3.xy * half2(UVaMUv2Texcoord.zw) + half2(UVaMUv2Texcoord.xy);
#endif // defined(MULTI_UV2_ENANLED)

	// 射影マップ
#if defined(PROJECTION_MAP_ENABLED)
	OUT.ProjMap.xy = half2(worldSpacePosition.xz / ProjectionScale) + UVaProjTexcoord.xy;
#endif // defined(PROJECTION_MAP_ENABLED)

	// 頂点カラー
#if defined(VERTEX_COLOR_ENABLED)
	OUT.Color0 = min(half4(1, 1, 1, 1), half4(IN.Color.r, IN.Color.g, IN.Color.b, IN.Color.a));
#else
	OUT.Color0 = float4(1.0);
#endif

	// フォグ
	OUT.Color1.rgb = float3(0.0);
#if defined(FOG_ENABLED)
	OUT.Color1.a = EvaluateFogValue(viewSpacePosition, worldSpacePosition.y);
#else
	OUT.Color1.a = 0.0;
#endif

	// インスタンス描画
#if defined(INSTANCING_ENABLED)
	OUT.instanceParam = float4(0);
	#if defined(FAR_CLIP_BY_DITHER_ENABLED)
	// ディザリングによる距離クリップ
	float ditherValue = EvaluateDitherValue(instancePosInView, GameDitherParams.x, GameDitherParams.y);
	OUT.instanceParam.x = ditherValue;
	#endif
	// ディザリングによるモデル切替
	OUT.instanceParam.y = IN.instancingInput.InstanceColor.x;
	OUT.instanceParam.z = IN.instancingInput.InstanceColor.y;
#endif // defined(INSTANCING_ENABLED)

	return OUT;
}

in	DefaultVPInput IN;
out	DefaultVPOutput OUT;
out gl_PerVertex
{
    vec4 gl_Position;
};

void main()
{
	DefaultVPInput IN_ = IN;
#ifdef INSTANCING_ENABLED
	IN_.instancingInput	= instancingInput;
#endif

	OUT = DefaultVPShader(IN_);

	gl_Position	= OUT.Position;
}

#endif

//-----------------------------------------------------------------------------
// 深度値のみ書き込み用
//-----------------------------------------------------------------------------
#if defined(main_ForceTransparentDepthVPShader)
TransparentDepthVPOutput ForceTransparentDepthVPShader(DefaultVPInput IN)
{
	TransparentDepthVPOutput OUT;
	
#if defined(SKINNING_ENABLED)
	float3 position = IN.SkinnableVertex.xyz;
#else
	float3 position = IN.Position.xyz;
#endif

#if defined(SKINNING_ENABLED)
	EvaluateSkinPositionXBones(position, IN.SkinWeights, int4(IN.SkinIndices), BoneTransforms);
#endif // defined(SKINNING_ENABLED)

#if defined(INSTANCING_ENABLED)
	ApplyInstanceTransformVertex(IN.instancingInput, position);
#endif

#if defined(SKINNING_ENABLED)
	float3 worldSpacePosition = position;
#else
	float3 worldSpacePosition = _mul(World, float4(position, 1)).xyz;
#endif

#if defined(WINDY_GRASS_ENABLED)
	#if defined(WINDY_GRASS_TEXV_WEIGHT_ENABLED)
	worldSpacePosition = calcWindyGrass(worldSpacePosition.xyz, IN.TexCoord.y);
	#else
	worldSpacePosition = calcWindyGrass(worldSpacePosition.xyz);
	#endif
#endif

	OUT.Position = _mul(scene.ViewProjection, float4(worldSpacePosition, 1));
	OUT.TexCoord.xy = IN.TexCoord.xy;
	
	// 頂点カラー
#if defined(VERTEX_COLOR_ENABLED)
	OUT.Color0 = min(half4(1, 1, 1, 1), half4(IN.Color.r, IN.Color.g, IN.Color.b, IN.Color.a));
#else
	OUT.Color0 = half4(1);
#endif

	return OUT;
}

in	DefaultVPInput IN;
out	TransparentDepthVPOutput OUT;
out gl_PerVertex
{
    vec4 gl_Position;
};

void main()
{
	DefaultVPInput IN_ = IN;
#ifdef INSTANCING_ENABLED
	IN_.instancingInput	= instancingInput;
#endif

	OUT = ForceTransparentDepthVPShader(IN_);

	gl_Position	= OUT.Position;
}
#endif

